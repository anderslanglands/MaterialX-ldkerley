//
// Created by Lee Kerley on 2/12/25.
//

#include <string>
#include <iostream>
#include <fstream>
#include <sstream>

using namespace std;

int main(int argc, char** argv)
{
    unsigned int argi = 1;
    std::string relativeDir = argv[argi++];
    std::string outputFilename = argv[argi++];
    std::ofstream ofs(outputFilename);

    cout << "Writing Embedded Library Source File - '" << outputFilename << "'" << endl;

    ofs << R"a(// Generated by libraries/CMakeLists.txt

#include <MaterialXLibrary/EmbeddedLibrary.h>

#include <string>
#include <unordered_map>

MATERIALX_NAMESPACE_BEGIN

const std::string& readEmbeddedSourceFile(const std::string& filename) {
        static const std::string missingFileContents = "MISSING SOURCE";
        static const std::unordered_map<std::string, std::string> embeddedFiles = {
)a";

string sep = "";

            for (unsigned int i = argi; i < argc; ++i) {
                std::string f = argv[i];

                std::string relative_f = f.substr(relativeDir.size()+1);

                // cout << "  '" << f << "'" << endl;

                string contents = "FILE CONTENTS";


                std::ifstream t(f);
                std::stringstream buffer;
                buffer << t.rdbuf();

                contents = buffer.str();



    ofs << sep << endl << "    {\"" << relative_f << "\", R\"a(" << contents << ")a\"}";

sep = "," ;
            }


//
//             {"README.md",R"a(
// THE CONTENTS )")a"},
//             {"bxdf/disney_principled.mtlx",R"a(
// THE CONTENTS )")a"},
//             {"bxdf/gltf_pbr.mtlx",R"a(
// THE CONTENTS )")a"}

    ofs << R"a(
        };

        std::string tmp = filename;

        auto found = filename.find("libraries");
        if (found != std::string::npos)
        {
            tmp = filename.substr(found+10);
        }


        auto it = embeddedFiles.find(tmp);
        if (it == embeddedFiles.end())
            return missingFileContents;
        return it->second;
    }

    MATERIALX_NAMESPACE_END
    )a";



    return 0;
}